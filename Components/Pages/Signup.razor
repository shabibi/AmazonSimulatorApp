@page "/signup"
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@inject IUserService userService
@inject ISellerService sellerService
@inject ISnackbar Snackbar

<h3>Sign Up</h3>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="Username is required!"
                              @bind-Value="newUser.Name" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid." })"
                              @bind-Value="newUser.Email" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="PasswordStrength" Required="true"
                              RequiredError="Password is required!" @bind-Value="newUser.Password" />
                <MudTextField T="string" Label="Repeat Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="PasswordMatch" />

                <!-- Role Selection -->
                <MudRadioGroup T="string" @bind-Value="selectedRole" Required="true" RequiredError="Please select a role.">
                    <MudRadio T="string" Value="@roles[0]" Color="Color.Primary" Dense="true">Client</MudRadio>
                    <MudRadio T="string" Value="@roles[1]" Color="Color.Secondary" Dense="false">Seller</MudRadio>
                </MudRadioGroup>

                <div class="d-flex align-center justify-space-between mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="RegisterUser" Class="ml-auto">
                        Register
                    </MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private User newUser = new User();
    private bool success;
    private string[] errors = { };
    private MudTextField<string> pwField1;
    private MudForm form;
    private string[] roles = { "Client", "Seller" }; // Role options
    private string selectedRole; // Holds the selected role
    private async Task RegisterUser()
    {
        // Validate the form
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                errors = new string[] { }; // Clear any previous errors
                newUser.Role = selectedRole; // Assign selected role to the user
                await userService.AddUser(newUser); // Call service to add user
                if(selectedRole == roles[1])
                {
                    Seller newSeller = new Seller { UID = newUser.ID, Rating = 0 };
                    sellerService.AddSeller(newSeller);
                }
                NavigationManager.NavigateTo("/signin"); // Or any page after login

                Snackbar.Add("Registration successful!", Severity.Success);

            }
            catch (Exception ex)
            {
                errors = new string[] { ex.Message }; // Capture any error that occurred
                Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
            yield return "Password is required!";
        if (pw.Length < 8)
            yield return "Password must be at least 8 characters long.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one uppercase letter.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one number.";
    }

    private string PasswordMatch(string arg)
    {
        return pwField1.Value != arg ? "Passwords don't match!" : null;
    }
}
